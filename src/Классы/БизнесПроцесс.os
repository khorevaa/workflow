#Использовать logos
#Использовать "./internal/types"
#Использовать "./internal/handlers"
#Использовать "./internal/context"

Перем Лог;

Перем Наименование; // Строка
Перем МассивЗадач;  // Массив
Перем _Стартован;   // Булево
Перем _Завершен;    // Булево
Перем _ОписаниеОшибки;    // Неопределено / Объект <ОписаниеОшибкиВыполнения>
Перем ПрерватьВыполнение; // Булево
Перем Контекст;     // Объект <КонтекстВыполнения>
Перем ОбработчикиСобытий; // Объект <ОбработчикиСобытий>

#Область Программный_интерфейс

// Возвращает признак запуска бизнес процесса
//
//  Возвращаемое значение:
//   Булево - признак запуска бизнес процесса
//
Функция Стартован() Экспорт
	Возврат _Стартован;
КонецФункции

// Возвращает признак завершения бизнес процесса
//
//  Возвращаемое значение:
//   Булево - признак завершения бизнес процесса
//
Функция Завершен() Экспорт
	Возврат _Завершен;
КонецФункции

// Возвращает наименование бизнес процесса
//
//  Возвращаемое значение:
//   Строка - наименование бизнес процесса
//
Функция Наименование() Экспорт
	Возврат Наименование; 	
КонецФункции

// Устанавливает новый контекст выполнения в бизнес процесс
//
// Параметры:
//   НовыйКонтекстБизнесПроцесса - Объект - объект класса <КонтекстВыполнения> 
//
Процедура УстановитьКонтекст(НовыйКонтекстБизнесПроцесса) Экспорт
	
	Контекст = НовыйКонтекстБизнесПроцесса;
	
КонецПроцедуры

// Возвращает описание ошибки выполнения в бизнес процесса
//
//  Возвращаемое значение:
//   Объект - объект класса <ОписаниеОшибкиВыполнения>
//
Функция ПолучитьОписаниеОшибки() Экспорт
	Возврат _ОписаниеОшибки;
КонецФункции

// Возвращает контекст выполнения в бизнес процесса
//
//  Возвращаемое значение:
//   Объект - объект класса <КонтекстВыполнения>
//
Функция ПолучитьКонтекст() Экспорт
	
	Возврат Контекст;
	
КонецФункции

// Добавляет новую задачу в бизнес процесс и возвращает ее
//
// Параметры:
//   НаименованиеЗадачи - Строка - наименование задачи
//   ОбъектОбработчик - Объект - произвольный класс
//   ИмяМетода - Строка - имя метода класс для выполнения
//   ПараметрыМетода - Массив - массив параметров метода (по умолчанию неопределено)
//   ВНачало - Булево - признак добавление задачи в начало бизнес процесса (по умолчанию Ложь)
//   КонтекстВыполненияЗадачи - Объект - объект класса <КонтекстВыполнения>
//
//  Возвращаемое значение:
//   Объект - объект класса <ЗадачаБизнесПроцесса>
//
Функция НоваяЗадача(Знач НаименованиеЗадачи, ОбъектОбработчик,
	Знач ИмяМетода, ПараметрыМетода = Неопределено, Знач ВНачало = Ложь, КонтекстВыполненияЗадачи = Неопределено) Экспорт
	
	Возврат ДобавитьЗадачуВБизнесПроцесс(НаименованиеЗадачи, ВНачало, ОбъектОбработчик, ИмяМетода, ПараметрыМетода, КонтекстВыполненияЗадачи);
	
КонецФункции

// Добавляет новую задачу в бизнес процесс
//
// Параметры:
//   НаименованиеЗадачи - Строка - наименование задачи
//   ОбъектОбработчик - Объект - произвольный класс
//   ИмяМетода - Строка - имя метода класс для выполнения
//   ПараметрыМетода - Массив - массив параметров метода (по умолчанию неопределено)
//   КонтекстВыполненияЗадачи - Объект - объект класса <КонтекстВыполнения>
//
//  Возвращаемое значение:
//   Объект - объект класса <БизнесПроцесс>
//
Функция ДобавитьЗадачу(Знач НаименованиеЗадачи, ОбъектОбработчик,
	Знач ИмяМетода, ПараметрыМетода = Неопределено, КонтекстВыполненияЗадачи = Неопределено) Экспорт
	
	ДобавитьЗадачуВБизнесПроцесс(НаименованиеЗадачи, , ОбъектОбработчик, ИмяМетода, ПараметрыМетода, КонтекстВыполненияЗадачи);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет новую задачу в начало бизнес процесса
//
// Параметры:
//   НаименованиеЗадачи - Строка - наименование задачи
//   ОбъектОбработчик - Объект - произвольный класс
//   ИмяМетода - Строка - имя метода класс для выполнения
//   ПараметрыМетода - Массив - массив параметров метода (по умолчанию неопределено)
//   КонтекстВыполненияЗадачи - Объект - объект класса <КонтекстВыполнения>
//
//  Возвращаемое значение:
//   Объект - объект класса <БизнесПроцесс>
//
Функция ДобавитьЗадачуВНачало(Знач НаименованиеЗадачи, ОбъектОбработчик,
	Знач ИмяМетода, ПараметрыМетода = Неопределено, КонтекстВыполненияЗадачи = Неопределено) Экспорт
	
	ДобавитьЗадачуВБизнесПроцесс(НаименованиеЗадачи, Истина, ОбъектОбработчик, ИмяМетода, ПараметрыМетода, КонтекстВыполненияЗадачи);
	
	Возврат ЭтотОбъект;
	
КонецФункции


// Добавляет новое условие в бизнес процесс
//
// Параметры:
//   КлючКонтекста - Строка - ключ контекста для условия
//   КонтекстВыполнения - Объект - объект класса <КонтекстВыполнения> (по умолчанию КонтекстБизнесПроцесса) 
//
//  Возвращаемое значение:
//   Объект - объект класса <УсловиеБизнесПроцесса>
//
Функция НовоеУсловие(КлючКонтекста, КонтекстВыполнения = Неопределено) Экспорт
	
	УсловиеБизнесПроцесса = Новый УсловиеБизнесПроцесса(КлючКонтекста, КонтекстВыполнения, ЭтотОбъект);
	
	ДобавитьЗадачуВБизнесПроцесс(УсловиеБизнесПроцесса.Наименование(), , УсловиеБизнесПроцесса, "ВыполнитьУсловие", , КонтекстВыполнения);
	
	Возврат УсловиеБизнесПроцесса;
	
КонецФункции

// Создает вложенный бизнес процесс
//
// Параметры:
//   НаименованиеВложенногоБизнесПроцесса - Строка - Наименование вложенного бизнес процесса
//
//  Возвращаемое значение:
//   Объект - объект класса <БизнесПроцесс>
//
Функция НовыйВложенныйБизнесПроцесс(Знач НаименованиеВложенногоБизнесПроцесса) Экспорт
	
	ВложенныйБизнесПроцесс = Новый БизнесПроцесс(НаименованиеВложенногоБизнесПроцесса);
	ДобавитьВложенныйБизнесПроцесс(ВложенныйБизнесПроцесс);

	Возврат ВложенныйБизнесПроцесс;
	
КонецФункции

// Добавляет бизнес процесса как вложенный для текущего бизнес процесса
//
// Параметры:
//   ВложенныйБизнесПроцесс - Объект - объект класса <БизнесПроцесс>
//
Процедура  ДобавитьВложенныйБизнесПроцесс(ВложенныйБизнесПроцесс) Экспорт
	
	Если ТипЗнч(ВложенныйБизнесПроцесс) = Тип("БизнесПроцесс") Тогда
		ДобавитьЗадачуВБизнесПроцесс(ВложенныйБизнесПроцесс.Наименование(), , ВложенныйБизнесПроцесс, "Запустить");
	Иначе
		ВызватьИсключение СтрШаблон("Не корректный тип <%1> бизнес процесса", ТипЗнч(ВложенныйБизнесПроцесс));
	КонецЕсли;
	
КонецПроцедуры

// Добавляет задачу бизнес процесса как задачу текущего бизнес процесса
//
// Параметры:
//   НоваяЗадачаБизнесПроцесса - Объект - объект класса <ЗадачаБизнесПроцесса> 
//
Процедура ДобавитьЗадачуБизнесПроцесса(НоваяЗадачаБизнесПроцесса) Экспорт
	
	МассивЗадач.Добавить(НоваяЗадачаБизнесПроцесса);	
	
КонецПроцедуры

// Возвращает текущие обработчики событий бизнес процесса
//
//  Возвращаемое значение:
//   Объект - Объект класса <ОбработчикиСобытий>
//
Функция ПолучитьОбработчикиСобытий() Экспорт
	Возврат ОбработчикиСобытий;
КонецФункции

// Устанавливает новые обработчики событий бизнес процесса
//
// Параметры:
//   НовыеОбработчикиСобытий - Объект - Объект класса <ОбработчикиСобытий>
//
Процедура УстановитьОбработчикиСобытий(НовыеОбработчикиСобытий) Экспорт
	ОбработчикиСобытий = НовыеОбработчикиСобытий;
КонецПроцедуры

// Запускает бизнес процесс на выполнение
//
Процедура Запустить() Экспорт
	
	Если МассивЗадач.Количество() = 0 
		ИЛИ _Стартован 
		ИЛИ _Завершен Тогда
		Возврат;
	КонецЕсли;
	
	_Стартован = Истина;
	
	ПрерватьВыполнение = Ложь;
	
	Для каждого Задача Из МассивЗадач Цикл
		
		Если ПрерватьВыполнение Тогда
			_Завершен = Истина;
			Прервать;
		КонецЕсли;
		// ОбработчикиСобытий.Выполнить_("ПередВыполнениемЗадачи", ПараметрыСобытия)
		Задача.ВыполнитьЗадачу();
		
		Если Не Задача.Выполнена() Тогда
			Событие_ПриОшибкеВыполненияЗадачи(Задача, ПрерватьВыполнение);
		КонецЕсли;	
		// ОбработчикиСобытий.Выполнить_("ПослеВыполненияЗадачи", ПараметрыСобытия)
		
	КонецЦикла;
	
	Событие_ПриЗавершении();
	
КонецПроцедуры

#КонецОбласти

#Область Печать_графа

Процедура НапечататьГрафВыполнения(НачальныйУровень = 0) Экспорт
	
	//ВыводГрафаВыполнения = Новый ВыводГрафаВыполнения(НачальныйУровень);
	// TODO: Заготовка вывода графа выполнения

	// ВыводГрафаВыполнения.Вывести("Бизнес процесс <%1>:", Наименование());
	// ВыводГрафаВыполнения.Вывести("|");
	// ВыводГрафаВыполнения.Вывести("|\ Обработчики:");
	// // ВыводГрафаВыполнения.Вывести("|\");
	// ВывестиИнформациюПоСобытию("ПередВыполнением", ВыводГрафаВыполнения);
	// ВывестиИнформациюПоСобытию("ПередВыполнениемЗадачи", ВыводГрафаВыполнения);
	// ВывестиИнформациюПоСобытию("ПриОшибкеВыполненияЗадачи", ВыводГрафаВыполнения);
	// ВывестиИнформациюПоСобытию("ПослеВыполнениемЗадачи", ВыводГрафаВыполнения);
	// ВывестиИнформациюПоСобытию("ПриЗавершении", ВыводГрафаВыполнения);

	// ВыводГрафаВыполнения.Вывести("|");
	// ВыводГрафаВыполнения.Вывести("|-Задачи:");
	// ВыводГрафаВыполнения.Вывести("|\");
	
	// Для каждого ЗадачаБизнесПроцесса Из МассивЗадач Цикл

	// 	ЗадачаБизнесПроцесса.НапечататьГрафВыполнения(Уровень);

	// КонецЦикла;

КонецПроцедуры

Процедура ВывестиИнформациюПоСобытию(Знач ИмяСобытия, ВыводГрафаВыполнения)
	// ТаблицаОбработчиков = ОбработчикиСобытий.ПолучитьОбработчикиПоСобытию(ИмяСобытия);
	// ВыводГрафаВыполнения.Вывести("| |-<%1> - количество обработчиков <%2>", ИмяСобытия, ТаблицаОбработчиков.Количество());
	// Для каждого СтрокаОбработчик Из ТаблицаОбработчиков Цикл
		
	// 	ВыводГрафаВыполнения.Вывести("   |-<%1> - имя метода <%2>", СтрокаОбработчик.Обработчик, СтрокаОбработчик.ИмяМетода);
		
	// КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Переопределяемые_событий

// <Описание процедуры>
//
// Параметры:
//   ОбъектОбработчик - <Тип.Вид> - <описание параметра>
//   ИмяМетода - <Тип.Вид> - <описание параметра>
//
Процедура ПриОшибкеВыполненияЗадачи(ОбъектОбработчик, Знач ИмяМетода) Экспорт
	
	ОбработчикиСобытий.Добавить("ПриОшибкеВыполненияЗадачи", ОбъектОбработчик, ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область Стандартные_обработчики

Процедура ПриОшибкеВыполненияЗадачиСтандартнаяОбработка(ЗадачаБизнесПроцесса, ПродолжитьВыполнение)
	
	_ОписаниеОшибки = ЗадачаБизнесПроцесса.ПолучитьОписаниеОшибки();
	
	ПродолжитьВыполнение = Ложь;
	
КонецПроцедуры

Процедура ПриЗавершенииСтандартнаяОбработка()
	
	_Завершен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область События_Обработчики

Процедура Событие_ПриОшибкеВыполненияЗадачи(ЗадачаБизнесПроцесса, ПрерватьВыполнение)
	
	СтандартнаяОбработка = Истина;
	ПродолжитьВыполнение = Ложь;
	Параметры = ОбработчикиСобытий.НовыеПараметры(ЗадачаБизнесПроцесса, ПродолжитьВыполнение, СтандартнаяОбработка);
	ОбработчикиСобытий.Выполнить_("ПриОшибкеВыполненияЗадачи", Параметры);
	
	ПродолжитьВыполнение = Параметры[1];
	СтандартнаяОбработка = Параметры[2];
	
	Если СтандартнаяОбработка Тогда
		ПриОшибкеВыполненияЗадачиСтандартнаяОбработка(ЗадачаБизнесПроцесса, ПродолжитьВыполнение);
		ПродолжитьВыполнение = Параметры[1];
	КонецЕсли;
	
	ПрерватьВыполнение = НЕ ПродолжитьВыполнение;
	
КонецПроцедуры


Процедура Событие_ПриЗавершении()
	
	СтандартнаяОбработка = Истина;
	Параметры = ОбработчикиСобытий.НовыеПараметры(ЭтотОбъект, СтандартнаяОбработка);
	ОбработчикиСобытий.Выполнить_("ПриЗавершении", Параметры);
	
	СтандартнаяОбработка = Параметры[1];
	
	Если СтандартнаяОбработка Тогда
		ПриЗавершенииСтандартнаяОбработка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция ДобавитьЗадачуВБизнесПроцесс(Знач НаименованиеЗадачи, Знач ВНачало = Ложь, Знач ОбъектОбработчик,
	Знач ИмяМетода, ПараметрыМетода = Неопределено, КонтекстВыполненияЗадачи = Неопределено)
	
	НоваяЗадача = Новый ЗадачаБизнесПроцесса(НаименованиеЗадачи, ОбъектОбработчик, ИмяМетода, ПараметрыМетода, КонтекстВыполненияЗадачи);
	НоваяЗадача.УстановитьБизнесПроцесс(ЭтотОбъект);
	
	Если ВНачало Тогда
		МассивЗадач.Вставить(0, НоваяЗадача);	
	Иначе
		МассивЗадач.Добавить(НоваяЗадача);	
	КонецЕсли;
	
	Возврат НоваяЗадача;
	
КонецФункции

Функция Скопировать() Экспорт
	
	НовыйБизнесПроцесс = Новый БизнесПроцесс(Наименование());
	НовыйКонтекст = НовыйБизнесПроцесс.ПолучитьКонтекст();
	
	Контекст.СкопироватьВ(НовыйКонтекст);
	
	Для каждого ЗадачаБизнесПроцесса Из МассивЗадач Цикл
		
		НоваяЗадача = ЗадачаБизнесПроцесса.Скопировать();
		НовыйБизнесПроцесс.ДобавитьЗадачуБизнесПроцесса(НоваяЗадача);
		
	КонецЦикла;
	
	Возврат НовыйБизнесПроцесс;
	
КонецФункции

Процедура ПриСозданииОбъекта(НаименованиеБизнесПроцесса)
	
	МассивЗадач = Новый Массив();
	_Стартован = Ложь;
	_Завершен = Ложь;
	ПрерватьВыполнение = Ложь;
	
	Наименование = НаименованиеБизнесПроцесса;
	
	ОбработчикиСобытий = Новый ОбработчикиСобытий;
	
	Контекст = Новый КонтекстВыполнения;
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.workflow");
	
КонецПроцедуры

#КонецОбласти
