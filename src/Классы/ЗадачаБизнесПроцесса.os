#Использовать logos
#Использовать delegate
#Использовать "./internal/types"

Перем БизнесПроцессЗадачи;

Перем Выполнена;
Перем ОписаниеОшибкиВыполнения;

Перем Наименование;
Перем ОбъектОбработчик;
Перем ИмяМетода;
Перем ПараметрыМетода;
Перем КонтекстВыполнения;
Перем Идентификатор;

Перем Лог;

Перем ОбработчикиСобытий;

Функция Наименование() Экспорт
	Возврат Наименование;
КонецФункции

Функция Идентификатор() Экспорт
	Возврат Идентификатор;
КонецФункции

Функция Выполнена() Экспорт
	Возврат Выполнена;
КонецФункции

Процедура ВыполнитьЗадачу() Экспорт
	
	Если Выполнена Тогда
		ВызватьИсключение "Выполнение, уже выполненной задачи не возможно";
	КонецЕсли;

	ВыполнениеЗадачи();
	
	Если Не Выполнена Тогда 
		
		СтандартнаяОбработка = Истина;
		ПродолжитьВыполнение = Ложь;
		
		ПриОшибкеВыполненияЗадачи(ПродолжитьВыполнение, СтандартнаяОбработка);

	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеОшибки() Экспорт
	
	Возврат ОписаниеОшибкиВыполнения; 
	
КонецФункции

Процедура ПриОшибкеВыполненияЗадачи(ПродолжитьВыполнение, СтандартнаяОбработка)
	
	ОбработчикПриОшибке = ОбработчикиСобытий.ПриОшибке;
	
	Если ОбработчикПриОшибке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетодаПриОшибке = Новый Массив();
	
	Делегат = Делегаты.Создать(ОбработчикПриОшибке.ОбъектОбработчик, ОбработчикПриОшибке.ИмяМетода);
	
	ПараметрыМетодаПриОшибке.Добавить(ЭтотОбъект);
	ПараметрыМетодаПриОшибке.Добавить(ПродолжитьВыполнение);
	ПараметрыМетодаПриОшибке.Добавить(СтандартнаяОбработка);

	Если ПараметрыМетода.Количество() > 0  Тогда
		Делегат.Исполнить(ПараметрыМетодаПриОшибке);
	Иначе
		Делегат.Исполнить();
	КонецЕсли;
	
	ПродолжитьВыполнение = ПараметрыМетодаПриОшибке[1];
	СтандартнаяОбработка = ПараметрыМетодаПриОшибке[2];
	
КонецПроцедуры

Процедура ВыполнениеЗадачи()
	
	Попытка
		
		ВыполнитьЗадачуПоУмолчанию();
		Выполнена = Истина;
		
	Исключение
		
		СформироватьОписаниеОшибкиВыполнения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьОписаниеОшибкиВыполнения(ОписаниеОшибкиИсключения);
	
	ОписаниеОшибкиВыполнения = Новый ОписаниеОшибкиВыполнения;
	ОписаниеОшибкиВыполнения.Ошибка = ОписаниеОшибкиИсключения;
	ОписаниеОшибкиВыполнения.Задача = ЭтотОбъект;
	ОписаниеОшибкиВыполнения.БизнесПроцесс = БизнесПроцессЗадачи;
	
КонецПроцедуры

Процедура ВыполнитьЗадачуПоУмолчанию()
	
	Делегат = Делегаты.Создать(ОбъектОбработчик, ИмяМетода);
	
	ИспользуетсяКонтекст = Не КонтекстВыполнения = Неопределено;
	
	Если ИспользуетсяКонтекст Тогда
		ВыполнитьЗадачуСКонтекстом(Делегат);
	Иначе
		ВыполнитьЗадачуБезКонтекста(Делегат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗадачуСКонтекстом(Делегат)
	
	ПараметрыСУчетомКонтекста = Новый Массив;
	ПараметрыСУчетомКонтекста.Добавить(КонтекстВыполнения);
	
	ЕстьСвоиПараметры = ПараметрыМетода.Количество();
	
	Если ЕстьСвоиПараметры Тогда
		Для каждого ПараметрМетода Из ПараметрыМетода Цикл
			ПараметрыСУчетомКонтекста.Добавить(ПараметрМетода);
		КонецЦикла;
	КонецЕсли;
	
	Делегат.Исполнить(ПараметрыСУчетомКонтекста);
	
	Если ЕстьСвоиПараметры Тогда
		
		МаксимальныйИндексПараметров = ПараметрыМетода.ВГраница();

		Для ИИ = 0 По МаксимальныйИндексПараметров Цикл
			ПараметрыМетода[ИИ] = ПараметрыСУчетомКонтекста[ИИ+1];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗадачуБезКонтекста(Делегат)
	
	Если ПараметрыМетода.Количество() > 0  Тогда
		Делегат.Исполнить(ПараметрыМетода);
		// TODO: Проработать вопрос присвоения массива параметров назад
	Иначе
		Делегат.Исполнить();
	КонецЕсли;
	
КонецПроцедуры

Функция Скопировать() Экспорт
	
	ПараметрыМетодаНовойЗадач = РаботаСТипами.СкопироватьМассив(ПараметрыМетода);
	
	НоваяЗадача = Новый ЗадачаБизнесПроцесса(Наименование, ОбъектОбработчик, ИмяМетода, ПараметрыМетодаНовойЗадач, КонтекстВыполнения);
	
	Для каждого ДополнительныйОбработчик Из ОбработчикиСобытий Цикл
		
		НоваяЗадача.ДобавитьДополнительныйОбработчик(ДополнительныйОбработчик.Ключ, РаботаСТипами.Скопировать(ДополнительныйОбработчик.Значение,, Ложь));
		
	КонецЦикла;
	
	Возврат НоваяЗадача;
	
КонецФункции

Функция ОшибкаРеализацииМетодаОбработчикаПриОшибке(Обработчик, ИмяМетодаОбработчика)
	Возврат СтрШаблон("Ошибка реализации Обработчика отсутствует метод <%1>", ИмяМетодаОбработчика);
КонецФункции

Функция ПриОшибке(Обработчик, Знач ИмяМетодаОбработчика) Экспорт
	
	РефлекторОбработчика = Новый РефлекторОбъекта(ОбъектОбработчик);
	МетодЗадачиЕсть = РефлекторОбработчика.ЕстьПроцедура(ИмяМетодаОбработчика, 3);
	
	Если Не МетодЗадачиЕсть Тогда
		ВызватьИсключение ОшибкаРеализацииМетодаОбработчикаПриОшибке(Обработчик, ИмяМетодаОбработчика);
	КонецЕсли;
	
	СтруктураОбработчика = Новый Структура();
	СтруктураОбработчика.Вставить("Обработчик", Обработчик);
	СтруктураОбработчика.Вставить("имяМетода", ИмяМетодаОбработчика);
	
	ДобавитьДополнительныйОбработчик("ПриЗаписи", СтруктураОбработчика);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Процедура ДобавитьДополнительныйОбработчик(ИмяОбработчика, СтруктураОбработчика) Экспорт
	
	ОбработчикиСобытий.Вставить(ИмяОбработчика, СтруктураОбработчика);
	
КонецПроцедуры

Функция БизнесПроцесс() Экспорт
	
	Возврат БизнесПроцессЗадачи;
	
КонецФункции

Процедура УстановитьБизнесПроцесс(НовыйБизнесПроцессЗадачи) Экспорт
	
	Если Не БизнесПроцессЗадачи = Неопределено Тогда
		Лог.КритичнаяОшибка("Для данной задачи <%1> (<%2>) уже задан бизнес процесс. Переопределение невозможно", Наименование, Идентификатор);
		Возврат;
	КонецЕсли;
	
	БизнесПроцессЗадачи = НовыйБизнесПроцессЗадачи;
	
КонецПроцедуры

Процедура ПроверитьОбъектОбработчик()
	
	КоличествоПараметровМетода = ПараметрыМетода.Количество();
	
	Если НЕ КонтекстВыполнения = Неопределено Тогда
		КоличествоПараметровМетода = КоличествоПараметровМетода + 1;
	КонецЕсли;
	
	РефлекторОбработчика = Новый РефлекторОбъекта(ОбъектОбработчик);
	МетодЗадачиЕсть = РефлекторОбработчика.ЕстьПроцедура(ИмяМетода, КоличествоПараметровМетода);
	
	Если Не МетодЗадачиЕсть Тогда
		ВызватьИсключение СтрШаблон("Не удалось создать задачу для объекта <%1> с методом <%2> (количество параметров <%3>)",
		ОбъектОбработчик, ИмяМетода, КоличествоПараметровМетода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииОбъекта(Знач ЗначениеНаименование, Знач ЗначениеОбъектОбработчик,
	Знач ЗначениеИмяМетода, Знач ЗначениеПараметрыМетода = Неопределено, Знач ЗначениеКонтекстВыполнения = Неопределено)
	
	БизнесПроцессЗадачи = Неопределено;
	Идентификатор = Новый УникальныйИдентификатор();
	
	Наименование = ЗначениеНаименование;
	ОбъектОбработчик = ЗначениеОбъектОбработчик;
	ИмяМетода = ЗначениеИмяМетода;
	ПараметрыМетода = ЗначениеПараметрыМетода;
	КонтекстВыполнения = ЗначениеКонтекстВыполнения;
	
	ОбработчикиСобытий = Новый Структура("ПриОшибке, ПриВыполнении, ПослеВыполнения, ПередВыполнением");
	
	СтандартнаяОбработкаОшибки = Истина;
	Выполнена = Ложь;
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.workflow.task");
	
	Если ПараметрыМетода = Неопределено Тогда
		ПараметрыМетода = Новый Массив;
	КонецЕсли;
	
	ПроверитьОбъектОбработчик();
	
КонецПроцедуры