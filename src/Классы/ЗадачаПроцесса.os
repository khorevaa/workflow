#Использовать reflector
#Использовать delegate

Перем ЗадачаПередВыполнением;
Перем ЗадачаПослеВыполнения;
Перем ЗадачаОшибкиВыполнения;

Перем ОбъектОбработчик; // Произвольный объект
Перем ИмяМетода; // Строка
Перем ПараметрыМетода; // МассивПараметров

Перем ВыполнитьВПопытке; // Булево

Перем Выполнена Экспорт; // Булево, Если истина - выполнена без ошибки, ложь выполнена с ошибкой см. реквизит ОписаниеОшибкиВыполнения
Перем ОписаниеОшибкиВыполнения Экспорт; // Строка

Перем РефлекторОбработчика; // Объект РефлекторОбъекта

Процедура ПередВыполнением(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода = Неопределено) Экспорт

	ЗадачаПередВыполнением = НоваяЗадача(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода);

КонецПроцедуры

Процедура ЗадачаПередВыполнением(ВходящаяЗадача) Экспорт

	// TODO: Сделать проверку на тип должна быть только ЗадачаПроцесса
	ЗадачаПередВыполнением = ВходящаяЗадача;

КонецПроцедуры

Процедура ПослеВыполнения(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода = Неопределено) Экспорт

	ЗадачаПослеВыполнения = НоваяЗадача(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода);

КонецПроцедуры

Процедура ЗадачаПослеВыполнения(ВходящаяЗадача) Экспорт

	// TODO: Сделать проверку на тип должна быть только ЗадачаПроцесса
	ЗадачаПослеВыполнения = ВходящаяЗадача;

КонецПроцедуры

Процедура ПриОшибке(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода = Неопределено) Экспорт

	ЗадачаОшибкиВыполнения = НоваяЗадача(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода);

	ВыполнитьВПопытке = Истина;

КонецПроцедуры

Процедура ЗадачаПриОшибке(ВходящаяЗадача) Экспорт

	// TODO: Сделать проверку на тип должна быть только ЗадачаПроцесса
	ЗадачаОшибкиВыполнения = ВходящаяЗадача;

КонецПроцедуры

Функция НоваяЗадача(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода = Неопределено,
							ЗначениеПередВыполнением = Неопределено,
							ЗначениеПослеВыполнения = Неопределено,
							ЗначениеПриОшибке = Неопределено)

	НоваяЗадача = Новый ЗадачаПроцесса(ВходящийОбъектОбработчик, ВходящееИмяМетода, ВходящиеПараметрыМетода);

	Если Не ЗначениеПриОшибке = Неопределено Тогда

		НоваяЗадача.ЗадачаПриОшибке(ЗначениеПриОшибке);

	КонецЕсли;

	Если Не ЗначениеПередВыполнением = Неопределено Тогда

		НоваяЗадача.ЗадачаПередВыполнением(ЗначениеПередВыполнением);

	КонецЕсли;

	Если Не ЗначениеПослеВыполнения = Неопределено Тогда

		НоваяЗадача.ЗадачаПослеВыполнения(ЗначениеПослеВыполнения);

	КонецЕсли;

	Возврат НоваяЗадача;

КонецФункции

Функция НоваяПустаяЗадача()

	Возврат НоваяЗадача(Неопределено, "ПустаяЗадача");

КонецФункции

Функция ПустаяЗадача() Экспорт

	Возврат ОбъектОбработчик = Неопределено;

КонецФункции

Процедура ВыполнениеЗадачи() Экспорт

	Если ПустаяЗадача() Тогда
		Выполнена = Истина;
		Возврат;
	КонецЕсли;

	Если ВыполнитьВПопытке Тогда
		ВыполнитьЗадачуВПопытке();
	Иначе
		ВыполнитьЗадачуПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЗадачуВПопытке()

	Попытка

		ВыполнитьЗадачуПоУмолчанию();
		Выполнена = Истина;

	Исключение

		ОписаниеОшибкиВыполнения = ИнформацияОбОшибке();

	КонецПопытки;

КонецПроцедуры

Процедура ВыполнитьЗадачуПоУмолчанию()

	Делегат = Делегаты.Создать(ОбъектОбработчик, ИмяМетода);

	Если ПараметрыМетода.Количество() > 0  Тогда
		Делегат.Исполнить(ПараметрыМетода);

		// TODO: Проработать вопрос присвоения массива параметров назад
	Иначе
		Делегат.Исполнить();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЗадачу() Экспорт

	ВыполнительЗадач = Новый ВыполнительЗадач;
	ВыполнительЗадач.Задача(ЭтотОбъект)
					.ПередВыполнением(ЗадачаПередВыполнением)
					.ПослеВыполнения(ЗадачаПослеВыполнения)
					.ПриОшибке(ЗадачаОшибкиВыполнения)
					.ВыполнитьЗадачу();

КонецПроцедуры

Процедура ПриСозданииОбъекта(ВходящийОбъектОбработчик,
							ВходящееИмяМетода, ВходящиеПараметрыМетода = Неопределено,
							ВходящееИмяМетодаОшибки = "", ВходящиеПараметрыМетодаОшибки = Неопределено)

	ОбъектОбработчик = ВходящийОбъектОбработчик;
	ИмяМетода = ВходящееИмяМетода;
	ПараметрыМетода = ВходящиеПараметрыМетода;

	Выполнена = Ложь;
	ВыполнитьВПопытке = Ложь;
	ОписаниеОшибкиВыполнения = "";

	Если ОбъектОбработчик = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыМетода = Неопределено Тогда
		ПараметрыМетода = Новый Массив;
	КонецЕсли;

	КоличествоПараметровМетода = ПараметрыМетода.Количество();

	РефлекторОбработчика = Новый РефлекторОбъекта(ОбъектОбработчик);
	МетодЗадачиЕсть = РефлекторОбработчика.ЕстьПроцедура(ИмяМетода, КоличествоПараметровМетода);

	Если Не МетодЗадачиЕсть Тогда
		ВызватьИсключение СтрШаблон("Не удалось создать задачу для объекта <%1> с методом <%2> (количество параметров <%3>)",
							ОбъектОбработчик, ИмяМетода, КоличествоПараметровМетода);
	КонецЕсли;

	Если ВходящееИмяМетодаОшибки = Неопределено
		Или ПустаяСтрока(ВходящееИмяМетодаОшибки) Тогда

		ЗадачаОшибкиВыполнения = НоваяПустаяЗадача();

	Иначе

		ПриОшибке(ВходящийОбъектОбработчик, ВходящееИмяМетодаОшибки, ВходящиеПараметрыМетодаОшибки);

	КонецЕсли;

	ЗадачаПередВыполнением = НоваяПустаяЗадача();
	ЗадачаПослеВыполнения = НоваяПустаяЗадача();

КонецПроцедуры