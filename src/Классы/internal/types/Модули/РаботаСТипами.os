#Использовать reflector

Перем ПростыеТипы;
Перем СсылочныеТипы;
Перем ТипыМассивов;
Перем ТипыСтруктур;
Перем ТипыСоответствий;
Перем СпециальныеТипы;
Перем _Тип;

Перем НаборТипов;

#Область Работа_с_простыми_типами

Функция ЭтоПростойТип(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы);
	
КонецФункции

Функция ЭтоЧисло(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Число);
	
КонецФункции

Функция ЭтоСтрока(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Строка);
	
КонецФункции

Функция ЭтоБулево(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Булево);
	
КонецФункции

Функция ЭтоДата(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ПростыеТипы.Дата);
	
КонецФункции

Функция ЭтоТип(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, _Тип);
	
КонецФункции

#КонецОбласти

#Область Работа_с_типом_Массив

Функция ЭтоЛюбойМассив(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов);
	
КонецФункции

Функция ЭтоФиксированныйМассив(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов.ФиксированныйМассив);
	
КонецФункции

Функция ЭтоМассив(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыМассивов.Массив);
	
КонецФункции

Функция СкопироватьМассив(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоЛюбойМассив(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Приемник = Новый Массив();
	КонецЕсли;
	
	Для каждого ЭлементМассива Из Источник Цикл
		
		Если ПолноеКопирование Тогда
			Приемник.Добавить(СкопироватьЗначение(ЭлементМассива));
		Иначе
			Приемник.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоФиксированныйМассив(Источник) Тогда
		Приемник = Новый ФиксированныйМассив(Приемник);
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Работа_с_специальными_типами

Функция ЭтоСсылочныйТип(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы);
	
КонецФункции

Функция ЭтоНеопределено(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СпециальныеТипы.Неопределено);
	
КонецФункции

Функция ЭтоУникальныйИдентификатор(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СпециальныеТипы.УникальныйИдентификатор);
	
КонецФункции

Функция ЭтоUID(Знач ПеременнаяИлиТип) Экспорт
	
	Возврат ЭтоУникальныйИдентификатор(ПеременнаяИлиТип);
	
КонецФункции


#КонецОбласти

#Область Работа_с_типом_СписокЗначений

Функция ЭтоСписокЗначений(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.СписокЗначений);
	
КонецФункции

Функция СкопироватьСписокЗначений(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоСписокЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		Приемник = Новый СписокЗначений();
	КонецЕсли;
	
	Если Не ПолноеКопирование Тогда
		Приемник = Источник.Скопировать();
	Иначе
		
		Для каждого ЭлементИсточника Из Источник Цикл
			
			Источник.Добавить(СкопироватьЗначение(ЭлементИсточника.Значение),
			ЭлементИсточника.Представление,
			ЭлементИсточника.Пометка,
			ЭлементИсточника.Картинка);			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Работа_с_типом_ТаблицаЗначений

Функция ЭтоТаблицаЗначений(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.ТаблицаЗначений);
	
КонецФункции

Функция СкопироватьТаблицуЗначений(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоТаблицаЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Приемник = Источник.Скопировать();
	
	Если ПолноеКопирование Тогда
		
		КоличествоКолонок = Приемник.Колонки.Количество() - 1;
		
		Для каждого СтрокаПриемника Из Приемник Цикл
			
			Для ИндексКолонки = 0 По КоличествоКолонок Цикл
				
				СтрокаПриемника[ИндексКолонки] = СкопироватьЗначение(СтрокаПриемника[ИндексКолонки]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Работа_с_типом_ДеревоЗначений

Функция ЭтоДеревоЗначений(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, СсылочныеТипы.ДеревоЗначений);
	
КонецФункции

Функция СкопироватьДеревоЗначений(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоДеревоЗначений(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Приемник = Источник.Скопировать();
	
	Если ПолноеКопирование Тогда
		
		КоличествоКолонок = Приемник.Колонки.Количество() - 1;
		
		СкопироватьСтрокиДереваЗначений(Приемник.Строки, КоличествоКолонок);
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

Процедура СкопироватьСтрокиДереваЗначений(СтрокиДереваЗначений, КоличествоКолонок)

	Для каждого СтрокаДереваЗначений Из СтрокиДереваЗначений Цикл

		СкопироватьСтрокуДереваЗначений(СтрокаДереваЗначений, КоличествоКолонок);

	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьСтрокуДереваЗначений(СтрокаДереваЗначений, КоличествоКолонок)

	Для ИндексКолонки = 0 По КоличествоКолонок Цикл
				
		СтрокаДереваЗначений[ИндексКолонки] = СкопироватьЗначение(СтрокаДереваЗначений[ИндексКолонки]);
		
	КонецЦикла;
	
	Если СтрокаДереваЗначений.Строки.Количество() > 0 Тогда
		СкопироватьСтрокуДереваЗначений(СтрокаДереваЗначений.Строки, КоличествоКолонок)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Работа_с_типом_Сценарий

Функция ЭтоСценарий(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	// TODO: Проверить работу для сценария
	Возврат СравнениеТипов(ТипПеременной, СпециальныеТипы.Сценарий);
	
КонецФункции

Функция СкопироватьСценарий(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоСценарий(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;

	РасширенныйРефлектор = Новый РефлекторОбъекта(Источник);

	ЕстьФункцияСкопировать = РасширенныйРефлектор.ЕстьФункция("Скопировать");
	ЕстьПроцедураСкопироватьВ = РасширенныйРефлектор.ЕстьПроцедура("СкопироватьВ", 1);

	Если ЕстьФункцияСкопировать Тогда

		Приемник = Источник.Скопировать();

	ИначеЕсли ЕстьПроцедураСкопироватьВ Тогда
		
		Источник.СкопироватьВ(Приемник);

	Иначе
		
		Если ПолноеКопирование Тогда
			ВызватьИсключение "Копирование сценария не удалось";
		КонецЕсли;

		Приемник = Источник;
	
	КонецЕсли;

	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Работа_с_типом_Структура

Функция ЭтоЛюбаяСтруктура(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур);
	
КонецФункции

Функция ЭтоФиксированнаяСтруктура(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур.ФиксированнаяСтруктура);
	
КонецФункции

Функция ЭтоСтруктура(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСтруктур.ЭтоСтруктура);
	
КонецФункции

Функция СкопироватьСтруктуру(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоЛюбаяСтруктура(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		Приемник = Новый Структура();
	КонецЕсли;
	
	Для каждого ЭлементИсточника Из Источник Цикл
		
		Если ПолноеКопирование Тогда
			Приемник.Вставить(ЭлементИсточника.Ключ, СкопироватьЗначение(ЭлементИсточника.Значение));
		Иначе
			Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоФиксированнаяСтруктура(Источник) Тогда
		Приемник = Новый ФиксированнаяСтруктура(Приемник);
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Работа_с_типом_Соответствие

Функция ЭтоЛюбоеСоответствие(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий);
	
КонецФункции

Функция ЭтоФиксированноеСоответствие(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий.ФиксированноеСоответствие);
	
КонецФункции

Функция ЭтоСоответствие(Знач ПеременнаяИлиТип) Экспорт
	
	ТипПеременной = ПолучитьТипПеременной(ПеременнаяИлиТип);
	
	Возврат СравнениеТипов(ТипПеременной, ТипыСоответствий.Соответствие);
	
КонецФункции

Функция СкопироватьСоответствие(Знач Источник, Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Если Не ЭтоЛюбоеСоответствие(Источник) Тогда
		ВызватьИсключение "Ошибка копирование массива";
	КонецЕсли;
	
	Если Приемник = Неопределено Тогда
		Приемник = Новый Соответствие();
	КонецЕсли;
	
	Для каждого ЭлементИсточника Из Источник Цикл
		
		Если ПолноеКопирование Тогда
			Приемник.Вставить(ЭлементИсточника.Ключ, СкопироватьЗначение(ЭлементИсточника.Значение));
		Иначе
			Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоФиксированноеСоответствие(Источник) Тогда
		Приемник = Новый ФиксированноеСоответствие(Приемник);
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Копирование_значений

Функция Скопировать(Знач Источник, Знач Приемник = Неопределено, Знач ПолноеКопирование = Истина) Экспорт
	
	Приемник = СкопироватьЗначение(Источник, ПолноеКопирование);
	Возврат Приемник;

КонецФункции

Функция СкопироватьЗначение(Знач ЗначениеИсточник, Знач ПолноеКопирование = Истина)
	
	Если ЭтоПростойТип(ЗначениеИсточник) Тогда
		Возврат ЗначениеИсточник;
	ИначеЕсли ЭтоНеопределено(ЗначениеИсточник) Тогда
		Возврат Неопределено;
	ИначеЕсли ЭтоТип(ЗначениеИсточник) Тогда
		Возврат ЗначениеИсточник;
	ИначеЕсли ЭтоУникальныйИдентификатор(ЗначениеИсточник) Тогда
		Возврат Новый УникальныйИдентификатор(Строка(ЗначениеИсточник));
	ИначеЕсли ЭтоСсылочныйТип(ЗначениеИсточник) Тогда
		Возврат СкопироватьСсылочныйТип(ЗначениеИсточник, ПолноеКопирование);
	ИначеЕсли ЭтоСценарий(ЗначениеИсточник) Тогда
		Возврат СкопироватьСценарий(ЗначениеИсточник, , ПолноеКопирование);
	Иначе
		Возврат ЗначениеИсточник;
	КонецЕсли;

КонецФункции

Функция СкопироватьСсылочныйТип(Знач ЗначениеИсточник, Знач ПолноеКопирование = Истина) Экспорт
	
	Если ЭтоЛюбаяСтруктура(ЗначениеИсточник) Тогда
		Возврат СкопироватьСтруктуру(ЗначениеИсточник, , ПолноеКопирование);
	ИначеЕсли ЭтоЛюбоеСоответствие(ЗначениеИсточник) Тогда
		Возврат СкопироватьСоответствие(ЗначениеИсточник, , ПолноеКопирование)
	ИначеЕсли ЭтоТаблицаЗначений(ЗначениеИсточник) Тогда
		Возврат СкопироватьТаблицуЗначений(ЗначениеИсточник, , ПолноеКопирование);
	ИначеЕсли ЭтоСписокЗначений(ЗначениеИсточник) Тогда
		Возврат СкопироватьСписокЗначений(ЗначениеИсточник, , ПолноеКопирование);
	ИначеЕсли ЭтоЛюбойМассив(ЗначениеИсточник) Тогда
		Возврат СкопироватьМассив(ЗначениеИсточник, , ПолноеКопирование);
	Иначе
		Возврат ЗначениеИсточник;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция ПолучитьТипПеременной(Знач Переменная)
	
	Если Переменная = _Тип Тогда
		Возврат Переменная;
	КонецЕсли;
	
	Возврат ТипЗнч(Переменная);
	
КонецФункции

Функция СравнениеТипаСНаборомТипов(ВходящийТип, НаборТиповСравнения)
	
	РезультатСравнения = Ложь;
	
	Для каждого ТипНабора Из НаборТиповСравнения Цикл
		
		РезультатСравнения = ПростоеСравнениеТипов(ВходящийТип, ТипНабора);
		
		Если РезультатСравнения Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатСравнения;
	
КонецФункции

Функция СравнениеТипов(ВходящийТип, ОжидаемыйТип)
	
	ТипПеременной = ПолучитьТипПеременной(ОжидаемыйТип);
	
	Если ТипПеременной = _Тип Тогда
		Возврат ПростоеСравнениеТипов(ВходящийТип, ТипПеременной);
	ИначеЕсли ТипПеременной = Тип("Массив") Тогда
		Возврат СравнениеТипаСМассивомТипов(ВходящийТип, ОжидаемыйТип);
	ИначеЕсли ТипПеременной = Тип("Структура") Тогда
		Возврат СравнениеТипаСНаборомТипов(ВходящийТип, ОжидаемыйТип);
	КонецЕсли;
	
	Возврат ПростоеСравнениеТипов(ВходящийТип, ТипПеременной);
	
КонецФункции

Функция СравнениеТипаСМассивомТипов(ВходящийТип, МассивТипов)
	
	НайденныйЭлемент = 	МассивТипов.Найти(ВходящийТип);
	Возврат Не НайденныйЭлемент = Неопределено;
	
КонецФункции

Функция ПростоеСравнениеТипов(ВходящийТип, ОжидаемыйТип)
	Возврат ВходящийТип = ОжидаемыйТип;
КонецФункции

Процедура СформироватьНаборТипов()
	
	НаборТипов = Новый Структура();
	ДополнитьСтруктуру(НаборТипов, ПростыеТипы);
	ДополнитьСтруктуру(НаборТипов, СсылочныеТипы);
	ДополнитьСтруктуру(НаборТипов, СпециальныеТипы);
	
КонецПроцедуры

Процедура ДополнитьСтруктуру(Приемник, Источник)
	
	Для каждого ЭлементИсточника Из Источник Цикл
		
		Приемник.Вставить(ЭлементИсточника.Ключ, ЭлементИсточника.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Инициализация()
	
	_Тип = Тип("Тип");
	
	ПростыеТипы = Новый Структура();
	ПростыеТипы.Вставить("Число", Тип("Число"));
	ПростыеТипы.Вставить("Строка", Тип("Строка"));
	ПростыеТипы.Вставить("Булево", Тип("Булево"));
	ПростыеТипы.Вставить("Дата", Тип("Дата"));
	
	СсылочныеТипы = Новый Структура();
	СсылочныеТипы.Вставить("ТаблицаЗначений", Тип("ТаблицаЗначений"));
	СсылочныеТипы.Вставить("ДеревоЗначений", Тип("ДеревоЗначений"));
	СсылочныеТипы.Вставить("СписокЗначений", Тип("СписокЗначений"));
	
	СпециальныеТипы = Новый Структура();
	СпециальныеТипы.Вставить("УникальныйИдентификатор", Тип("УникальныйИдентификатор"));
	СпециальныеТипы.Вставить("Неопределено", Тип("Неопределено"));
	СпециальныеТипы.Вставить("Сценарий", Тип("Сценарий"));
	
	ТипыМассивов = Новый Структура();
	ТипыМассивов.Вставить("Массив", Тип("Массив"));
	ТипыМассивов.Вставить("ФиксированныйМассив", Тип("ФиксированныйМассив"));
	
	ДополнитьСтруктуру(СсылочныеТипы, ТипыМассивов);
	
	ТипыСтруктур = Новый Структура();
	ТипыСтруктур.Вставить("Структура", Тип("Структура"));
	ТипыСтруктур.Вставить("ФиксированнаяСтруктура", Тип("ФиксированнаяСтруктура"));
	
	ДополнитьСтруктуру(СсылочныеТипы, ТипыСтруктур);
	
	ТипыСоответствий = Новый Структура();
	ТипыСоответствий.Вставить("Соответствие", Тип("Соответствие"));
	ТипыСоответствий.Вставить("ФиксированноеСоответствие", Тип("ФиксированноеСоответствие"));
	ДополнитьСтруктуру(СсылочныеТипы, ТипыСоответствий);
	
	СформироватьНаборТипов();
	
КонецПроцедуры

#КонецОбласти

Инициализация();

